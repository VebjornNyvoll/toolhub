import { type NextPage } from "next";
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import Navbar from "../../../../components/navbar/Navbar";
import { signIn, signOut, useSession } from "next-auth/react";
import Button, { ColorOptions } from "../../../../components/buttons/Button";
import { useRouter } from "next/router";

import { api } from "../../../../utils/api";
import { contextProps } from "@trpc/react-query/shared";

import { Listbox, Transition } from "@headlessui/react";
import Dialog from "../../../../components/dialogs/Dialog";
import Container from "../../../../components/annonse/Container";
import Swiper from "../../../../components/swiper/Swiper";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";

const LeiUt: NextPage = () => {
  const { data: sessionData } = useSession();
  const router = useRouter();
  const ctx = api.useContext();
  const [dateSelection, setDateSelection] = useState<Date | null>(null);

  // get id from nextjs router
  const { id } = router.query;

  // get advert by id
  const { data: advert } = api.advertisement.getOne.useQuery(
    {
      id: id as string,
    },
    {
      enabled: !!id,
    }
  );

  const { data: author } = api.profile.getUser.useQuery(
    {
      id: advert?.authorId as string,
    },
    {
      enabled: !!advert?.authorId,
    }
  );

  const { data: bookedDates } = api.booking.getBookedDates.useQuery(
    {
      advertId: id as string,
    },
    {
      enabled: !!id,
    }
  );

  const bookedDatesArray: string[] | undefined = bookedDates?.map((date) => {
    return new Date(date.date).toDateString();
  });

  useEffect(() => {
    console.log(bookedDatesArray);
  }, [bookedDatesArray]);

  const { mutate: createBooking } = api.booking.create.useMutation({
    onSuccess: (data) => {
      ctx.booking
        .invalidate()
        .then(() => {
          void router.push("/");
        })
        .catch((err) => {
          console.log(err);
        });
    },
  });

  const handleBooking = (
    dateSelection: Date | null,
    advertId: string | null | undefined
  ) => {
    if (dateSelection == null || advertId == null || advertId == undefined) {
      return;
    }

    createBooking({
      date: new Date(dateSelection),
      advertId: advertId,
    });
  };

  return (
    <>
      <Head>
        <title>Toolhub | Lei ut</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center justify-end overflow-hidden bg-gray-100">
        <Navbar />
        <div className="container flex h-4/5 w-[700px] animate-from-bottom flex-col items-center justify-start rounded-t-2xl bg-white px-[5rem] py-[5rem] opacity-[0%] shadow-sm">
          <p className="self-start font-sofia text-lg font-medium tracking-wide">
            Lei verktøyet
          </p>
          <div className="mt-4 flex h-[120px] w-full items-center justify-center rounded-xl bg-gray-100 px-[2rem] shadow-md">
            <div className="flex w-full flex-row items-center justify-between">
              <div>
                <h3 className="font-sofia font-bold">{advert?.title}</h3>
                <p>{advert?.subCategoryName}</p>
              </div>
              <div className="rounded-full bg-black px-4 py-1 text-white">
                {advert?.price} NOK
              </div>
            </div>
          </div>
          <div className="mt-8 h-[2px] w-full bg-gray-200"></div>
          <div className="align-center mt-10 flex w-full flex-row justify-between">
            <div className="flex flex-col gap-2">
              <p>Ønsket dato for utleie</p>
              <DatePicker
                label="Start"
                value={dateSelection}
                disablePast={true}
                onChange={(newDate: Date | null) => {
                  if (newDate == null) {
                    return;
                  }
                  setDateSelection(newDate);
                }}
                shouldDisableDate={(date: Date) => {
                  if (
                    bookedDatesArray?.includes(new Date(date).toDateString())
                  ) {
                    return true;
                  } else {
                    return false;
                  }
                }}
              />
            </div>
          </div>
          <div className="h-8" />
          <Button
            text="Lei ut verktøy"
            color={ColorOptions.black}
            onClick={() => handleBooking(dateSelection, advert?.id)}
            flex={true}
          />
        </div>
      </main>
    </>
  );
};

export default LeiUt;
