import { type NextPage } from "next";
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import Navbar from "../components/navbar/Navbar";
import { signIn, signOut, useSession } from "next-auth/react";
import InputField from "../components/inputs/InputField";
import InputBox from "../components/inputs/InputBox";
import Button, { ColorOptions } from "../components/buttons/Button";
import { useRouter } from "next/router";
import axios from "axios";

import { api } from "../utils/api";
import { contextProps } from "@trpc/react-query/shared";

import { Listbox, Transition } from "@headlessui/react";

import { CATEGORIES } from "../../prisma/categories";

import Container from "../components/annonse/Container";

const NyAnnonse: NextPage = () => {
  const { data: sessionData } = useSession();
  const ctx = api.useContext();
  const [selectedCategory, setSelectedCategory] = useState(CATEGORIES[0]);
  const [selectedSubCategory, setSelectedSubCategory] = useState(
    selectedCategory?.subcategories[0]
  );
  useEffect(() => {
    setSelectedSubCategory(selectedCategory?.subcategories[0]);
  }, [selectedCategory, setSelectedCategory]);

  const [uploading, setUploading] = useState(false);
  const [selectedImage, setSelectedImage] = useState("");
  const [selectedFile, setSelectedFile] = useState<File>();

  const router = useRouter();

  const { mutate: createAdvert } = api.advertisement.create.useMutation({
    onSuccess: (data) => {
      ctx.advertisement
        .invalidate()
        .then(() => {
          console.log("success");
          void router.push(`/annonser/${data.id}`);
        })
        .catch((err) => {
          console.log(err);
        });
    },
  });

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const target = e.target as typeof e.target & {
      title: { value: string };
      price: { value: string };
      description: { value: string };
      image: { value: string };
    };
    const tittel = target.title.value;
    const pris: number = +target.price.value;
    const description = target.description.value;
    const image = target.image.value.split("\\")[2];
    createAdvert({
      title: tittel,
      price: pris,
      description: description,
      subCategoryName: selectedSubCategory ? selectedSubCategory.name : "",
      image: image ? image : "",
    });
    handleUpload();
  };

  const handleUpload = async () => {
    setUploading(true);
      try {
        if (!selectedFile) return;
        const formData = new FormData();
        formData.append("myImage", selectedFile);
        const {data} = await axios.post("/api/image", formData);
        console.log(data);
      } catch(error: any) {
        console.log(error.response?.data);
      }
    setUploading(false);
  }

  const userId = api.profile.getLoggedInUser.useQuery().data?.id;

  return (
    <>
      <Head>
        <title>Toolhub</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col bg-gray-100 ">
        <Navbar />
        {userId === undefined ? (
          <p className="font-futura mx-[440px] mt-48 h-screen justify-end overflow-hidden text-2xl">
            Du må være logget inn for å opprette en annonse.
          </p>
        ) : (
          <section className="mx-40 flex h-screen flex-col items-center justify-end">
            <Container title="Opprett ny annonse">
              <form
                className="flex w-full flex-col gap-6"
                onSubmit={(e) => handleSubmit(e)}
              >
                <div className="flex w-full flex-row gap-8">
                  <InputField label="Tittel" name="title" className="flex-1" />
                  <InputField
                    label="Pris (per dag)"
                    name="price"
                    placeholder="NOK"
                  />
                </div>
                <div className="flex h-full flex-row justify-end gap-12">
                  <div className="left-[4rem] z-10 flex w-7/12 flex-col">
                    <div className="z-10 h-20">
                      <p>Kategori</p>
                      <Listbox
                        value={selectedCategory}
                        onChange={setSelectedCategory}
                        name="category"
                        as="div"
                        className="mt-1 w-full overflow-hidden rounded-3xl border-2 border-solid border-black bg-gray-100"
                      >
                        <Listbox.Button className="w-full px-4 py-2 text-start">
                          {selectedCategory?.name}
                        </Listbox.Button>
                        <Transition
                          enter="transition duration-100 ease-out"
                          enterFrom="transform scale-95 opacity-0"
                          enterTo="transform scale-100 opacity-100"
                          leave="transition duration-75 ease-out"
                          leaveFrom="transform scale-100 opacity-100"
                          leaveTo="transform scale-95 opacity-0"
                        >
                          <Listbox.Options className="flex flex-col border-t-2 border-solid border-black">
                            {CATEGORIES.map((category) => (
                              <Listbox.Option
                                key={category.id}
                                value={category}
                                className="bg-transparent px-4 py-3 hover:bg-green-200"
                              >
                                {category.name}
                              </Listbox.Option>
                            ))}
                          </Listbox.Options>
                        </Transition>
                      </Listbox>
                    </div>
                    <div className="h-20">
                      <p>Underkategori</p>
                      <Listbox
                        value={selectedSubCategory}
                        onChange={setSelectedSubCategory}
                        name="category"
                        as="div"
                        className="mt-1 w-full overflow-hidden rounded-3xl border-2 border-solid border-black bg-gray-100"
                      >
                        <Listbox.Button className="w-full px-4 py-2 text-start">
                          {selectedSubCategory?.name}
                        </Listbox.Button>
                        <Transition
                          enter="transition duration-100 ease-out"
                          enterFrom="transform scale-95 opacity-0"
                          enterTo="transform scale-100 opacity-100"
                          leave="transition duration-75 ease-out"
                          leaveFrom="transform scale-100 opacity-100"
                          leaveTo="transform scale-95 opacity-0"
                        >
                          <Listbox.Options className="flex h-[12rem] flex-col overflow-y-scroll border-t-2 border-solid border-black">
                            {selectedCategory?.subcategories.map(
                              (subcategory) => (
                                <Listbox.Option
                                  key={subcategory.id}
                                  value={subcategory}
                                  className="bg-transparent px-4 py-3 hover:bg-green-200"
                                >
                                  {subcategory.name}
                                </Listbox.Option>
                              )
                            )}
                          </Listbox.Options>
                        </Transition>
                      </Listbox>
                    </div>
                    <div className="h-30">
                        <p>Last opp bilde</p>
                        <input type="file" name="image"
                          onChange={({ target }) => {
                            if (target.files) {
                              const file = target.files[0];
                              setSelectedFile(file);
                            }
                          }}
                        />
                    </div>
                  </div>
                  <div className="flex h-[18rem] w-full flex-row gap-12 ">
                    <InputBox
                      label="Beskrivelse"
                      name="description"
                      className="flex-1"
                      placeholder="Beskriv hva du leier ut"
                    />
                  </div>
                </div>
                <div className="w-[15rem] self-end">
                  <label>
                    <input
                      type="submit"
                      value="Opprett annonse"
                      className="w-full cursor-pointer rounded-md bg-black px-4 py-2 text-white hover:bg-emerald-700"
                      onClick={() => void router.push("/egne_annonser")} //lukker fane etter lagd annonse
                    />
                  </label>
                </div>
              </form>
            </Container>
          </section>
        )}
      </main>
    </>
  );
};

export default NyAnnonse;
