generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  city          String?
  accounts      Account[]
  sessions      Session[]
  adverts       Advert[]
}

model Advert {
  id              String       @id @default(cuid())
  type            String       @default("rent") // sell, rent
  title           String
  description     String
  price           Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  author          User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  category        Category?    @relation(fields: [categoryName], references: [name])
  categoryName    String?      
  SubCategory     SubCategory? @relation(fields: [subCategoryName], references: [name])
  subCategoryName String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  name            String      @id
  subCategories   SubCategory[]
  Adverts         Advert[]
}

model SubCategory {
  name         String   @id
  category     Category @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  categoryName String
  Adverts      Advert[]
}

// create a category with subcategories
